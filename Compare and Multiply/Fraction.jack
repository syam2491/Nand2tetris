// Syam prasad 21103
class Fraction {
   field int numerator, denominator;  
   constructor Fraction new(int a, int b) {
      let numerator = a;
      let denominator = b;
      do reduce();   
      return this;   
   }

   method void reduce() {
      var int g;
      let g = Fraction.gcd(numerator, denominator);
      if (g > 1) {
         let numerator = numerator / g;
         let denominator = denominator / g;}
      return;
   }

   method int getNumerator() { return numerator; }
   method int getDenominator() { return denominator; }  

   method void compare(Fraction other) {
	var int num, den;
	var Fraction a;
      if ((numerator * other.getDenominator()) > (other.getNumerator() * denominator))
      {
	do Output.printString("The greater fraction is:");
	let num = numerator;
	let den = denominator;
	let a = Fraction.new(num, den);
	do a.print(); }
      else { if((numerator * other.getDenominator()) < (other.getNumerator() * denominator)){
		do Output.printString("The lesser fraction is:");
		let num = other.getNumerator();
		let den = other.getDenominator();
		let a = Fraction.new(num, den);
		do a.print();}
		else{ if((numerator * other.getDenominator()) = (other.getNumerator() * denominator)){do Output.printString("The fractions are equal");}}}
	return;
   }


   method void dispose() {
      do Memory.deAlloc(this);  
      return;
   }
   
   method Fraction multiply(Fraction other) {
      return Fraction.new(numerator * other.getNumerator(), denominator * other.getDenominator());
   }

   method void print() {
      do Output.printInt(numerator);
      do Output.printString("/");
      do Output.printInt(denominator);
      return;
   }
   function int gcd(int a, int b) {
      var int r;
      while (~(b = 0)) {           
         let r = a - (b * (a / b));  
         let a = b; let b = r;
      }
      return a;
   }
}
